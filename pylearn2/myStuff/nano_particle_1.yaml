!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.myStuff.nanoParticle.NANO_PARTICLE {
        which_set: 'train',
        nParticles: %(nParticles)i,
        start: %(start)i,
        stop: %(stop)i,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [ !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h0',
                     dim: %(dim_h0)i,
                     sparse_init: 1,

                 },!obj:pylearn2.models.mlp.Linear {
                     layer_name: 'y',
                     dim: %(output)i,
                     irange: 0.
                 }
                ],
        nvis: %(nvis)i,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 10,
        learning_rate: %(learning_rate)f,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:pylearn2.myStuff.nanoParticle.NANO_PARTICLE {
                              which_set: 'valid',
                              nParticles: %(nParticles)i,
                              start: %(valid_start)i,
                              stop: %(valid_stop)i,
                          },
                'test'  : !obj:pylearn2.myStuff.nanoParticle.NANO_PARTICLE {
                              which_set: 'test',
                              nParticles: %(nParticles)i,
                              start: %(test_start)i,
                              stop: %(test_stop)i,
                          }

            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.mlp.Default {
            }, !obj:pylearn2.costs.mlp.WeightDecay {
                coeffs: {'h0': .00005, 'y': .00005}
            }
            ]
        },

        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_objective",
                    prop_decrease: 0.,
                    N: %(N_wait)i
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: %(max_epochs)i
                }
            ]
        }
    },
    extensions: [ !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_objective',
             save_path: "%(save_path)s/nano_particle_1_best.pkl"
        }, !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: .99
        }
    ]
}
