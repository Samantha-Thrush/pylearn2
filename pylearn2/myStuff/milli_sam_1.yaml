!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.myStuff.milleniumSAM.MILLI_SAM {
        which_set: 'train',
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [ !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h0',
                     dim: %(dim_h0)i,
                     sparse_init: 15
                 },!obj:pylearn2.models.mlp.Linear {
                     layer_name: 'y',
                     dim: 6,
                     irange: 0.
                 }
                ],
        nvis: 193,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: %(learning_rate)f,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:pylearn2.myStuff.milleniumSAM.MILLI_SAM {
                              which_set: 'valid',
                          },
                'test'  : !obj:pylearn2.myStuff.milleniumSAM.MILLI_SAM {
                              which_set: 'test',
                          }
            },
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .5
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_objective",
                    prop_decrease: 0.,
                    N: %(N_wait)i
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: %(max_epochs)i
                }
            ]
        }
    },
    extensions: [ !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_objective',
             save_path: "%(save_path)s/milli_sam_1_best.pkl"
        }, !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: .99
        }
    ]
}
